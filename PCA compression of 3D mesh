#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <Eigen/Dense>
#include <cmath>


using namespace std;
using namespace Eigen;

float square(float a);
float KG(Matrix<float, Dynamic, Dynamic> D, Matrix<float, Dynamic, Dynamic> Dnew);
float NMSE(Matrix<float, Dynamic, Dynamic> D, Matrix<float, Dynamic, Dynamic> Dnew);

#define N 10002
#define f 40

int main(int argc, char* argv[])
{
	string line;
	Matrix<float, Dynamic, Dynamic> D;
	Matrix<float, Dynamic, Dynamic> DT;
	Matrix<float, Dynamic, Dynamic> A;
	Matrix<float, Dynamic, Dynamic> E;
	Matrix<float, Dynamic, Dynamic> ET;
	Matrix<float, Dynamic, Dynamic> U;
	Matrix<float, Dynamic, Dynamic> UT;
	Matrix<float, Dynamic, Dynamic> F;
	Matrix<float, Dynamic, Dynamic> Dnew;
	//Matrix<float, Dynamic, Dynamic> S;
	Matrix<float, Dynamic, Dynamic> Si;
	Matrix<float, Dynamic, Dynamic> di;



	D.resize(3 * f, N);
	Dnew.resize(3 * f, N);
	DT.resize(N, 3 * f);
	A.resize(3 * f, 3 * f);
	U.resize(3 * f, 3 * f);
	UT.resize(3 * f, 3 * f);
	Si.resize(3 * f, 1);
	di.resize(3 * f, 1);

	//Load from files
	{
		ifstream myfileX("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data\\VertsX.txt");
		if (myfileX)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileX, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i, j) = v;
				}
			}
			myfileX.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileY("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data\\VertsY.txt");
		if (myfileY)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileY, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 1, j) = v;
				}
			}
			myfileY.close();
		}
		else std::cout << "fooey\n";

		ifstream myfileZ("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data\\VertsZ.txt");
		if (myfileZ)
		{
			for (int i = 0; i < f; i++)
			{
				for (int j = 0; j < N; j++)
				{
					(getline(myfileZ, line));
					float v;
					string s;

					v = stof(line);

					D(3 * i + 2, j) = v;
				}
			}
			myfileZ.close();
		}
		else std::cout << "fooey\n";
	}




	A = D * D.transpose();
	//compress
	BDCSVD<MatrixXf> svd(A, ComputeFullU);
	U = svd.matrixU();
	UT = U.transpose();

	//double SumN = 0;
	//for (int j = 0; j < N; j++)
	//{
	//	for (int i = 0; i < 3 * f; i++)
	//	{
	//		di(i, 0) = D(i, j);
	//	}

	//	Si = UT * di;

	//	for (int i = 0; i < 3 * f; i++)
	//	{
	//		SumN += Si(i, 0) * Si(i, 0);
	//	}
	//}


	ofstream myfile;
	//myfile.open("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\graphs\\1OI\\\NMSEs.txt");

	//for (int kapa = 0; kapa < 21; kapa++)
	{
		int kapa = 4;
		E.resize(3 * f, kapa);

		for (int i = 0; i < 3 * f; i++)
		{
			for (int j = 0; j < kapa; j++)
			{
				E(i, j) = U(i, j);
			}
		}
		F = E.transpose() * D;


		//decompress
		Dnew = E * F;

		//Write new Data to files
		{
			ofstream myfile;
			myfile.open("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data new\\temp\\VX.txt");
			for (int i = 0; i < 1; i++)
				for (int j = 0; j < N; j++)
					myfile << Dnew(3 * i + 0, j) << endl;
			myfile.close();

			myfile.open("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data new\\temp\\VY.txt");
			for (int i = 0; i < 1; i++)
				for (int j = 0; j < N; j++)
					myfile << Dnew(3 * i + 1, j) << endl;
			myfile.close();

			myfile.open("C:\\Users\\Δημήτρης\\Desktop\\διπλωματικη\\Data\\D_handstand\\Plain Data new\\temp\\VZ.txt");
			for (int i = 0; i < 1; i++)
				for (int j = 0; j < N; j++)
					myfile << Dnew(3 * i + 2, j) << endl;
			myfile.close();
		}

		//myfile << KG(D, Dnew) << endl;
		//std::cout << KG(D, Dnew) << endl;
		{
			//double MSE = 0;

			//for (int i = 0; i < 3 * f; i++)
			//{
			//	for (int j = 0; j < N; j++)
			//	{
			//		MSE += square(Dnew(i, j) - D(i, j));
			//	}
			//}


			//ET = E.transpose();

			//double SumK = 0;
			//for (int j = 0; j < N; j++)
			//{
			//	for (int i = 0; i < 3 * f; i++)
			//	{
			//		di(i, 0) = Dnew(i, j);
			//	}

			//	Si = ET * di;

			//	for (int i = 0; i < kapa; i++)
			//	{
			//		SumK += Si(i, 0) * Si(i, 0);
			//	}
			//}
			//myfile1 << kapa << endl;
			//myfile << SumK/SumN << endl;
			//myfile << NMSE(D, Dnew) << endl;
			//myfile << MSE << endl;


			//std::cout << "K is: " << kapa << " and MSE is: " << MSE << endl;
		}
	}
	//myfile.close();



	//compute MSE
	{
		//for (int i = 0; i < 3 * f; i++)
		//{
		//	for (int j = 0; j < K; j++)
		//		E(i, j) = U(i, j);

		//}

		//ET = E.transpose();
		//F = ET * D;
		//Dnew = E * F;

		//double MSE = 0;

		//for (int i = 0; i < 3 * f; i++)
		//{
		//	for (int j = 0; j < N; j++)
		//	{
		//		MSE += Pow(Dnew(i, j) - D(i, j), 2);
		//	}
		//}

		//std::cout << MSE / (N * 3 * f) << std::endl; 

		//SE is 30.7983
	}
	//std::cin.get();
	return 0;
}

float square(float a)
{
	return a * a;
}

float KG(Matrix<float, Dynamic, Dynamic> D, Matrix<float, Dynamic, Dynamic> Dnew)
{
	Matrix<float, Dynamic, Dynamic> means(f, 3);

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < f; j++)
			means(j, i) = 0;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < f; j++)
		{
			means(j, 0) += D(3 * j + 0, i);
			means(j, 1) += D(3 * j + 1, i);
			means(j, 2) += D(3 * j + 2, i);
		}
	}

	for (int i = 0; i < f; i++)
	{
		means(i, 0) /= N;
		means(i, 1) /= N;
		means(i, 2) /= N;
	}

	float s1 = 0, s2 = 0;

	for (int i = 0; i < f; i++)
	{
		for (int j = 0; j < N; j++)
		{
			s1 += square(D(3 * i + 0, j) - Dnew(3 * i + 0, j));
			s1 += square(D(3 * i + 1, j) - Dnew(3 * i + 1, j));
			s1 += square(D(3 * i + 2, j) - Dnew(3 * i + 2, j));

			s2 += square(D(3 * i + 0, j) - means(i, 0));
			s2 += square(D(3 * i + 1, j) - means(i, 1));
			s2 += square(D(3 * i + 2, j) - means(i, 2));
		}
	}

	return ((1 - (sqrt(s1) / sqrt(s2))) * 100);
}

float NMSE(Matrix<float, Dynamic, Dynamic> D, Matrix<float, Dynamic, Dynamic> Dnew)
{
	float err = 0, temp1 = 0, temp2 = 0;

	for (int i = 0; i < 3 * f; i++)
	{
		for (int j = 0; j < N; j++)
		{
			err += square(Dnew(i, j) - D(i, j));
		}
	}
	err /= (N * 3 * f);

	for (int i = 0; i < 3 * f; i++)
	{
		for (int j = 0; j < N; j++)
		{
			temp1 += square(D(i, j));
			temp2 += square(Dnew(i, j));
		}
	}
	temp1 /= (N * 3 * f);
	temp2 /= (N * 3 * f);

	return ((1 - err / (temp1 * temp2)) * 100);
}
